#include <Arduino.h>
#include "driver/mcpwm.h"

// === ESC configuration ===
#define ESC_MIN_US 1000
#define ESC_MAX_US 2000
#define ESC_FREQ_HZ 50

// === Motor pin mapping ===
const int motorPins[4] = {18, 19, 21, 22};
mcpwm_unit_t motorUnits[4]   = {MCPWM_UNIT_0, MCPWM_UNIT_0, MCPWM_UNIT_1, MCPWM_UNIT_1};
mcpwm_timer_t motorTimers[4] = {MCPWM_TIMER_0, MCPWM_TIMER_0, MCPWM_TIMER_1, MCPWM_TIMER_1};
mcpwm_operator_t motorOps[4] = {MCPWM_OPR_A, MCPWM_OPR_B, MCPWM_OPR_A, MCPWM_OPR_B};

// Helper function to set pulse width for a motor
void escWriteUs(int motor, int us) {
  if (motor < 0 || motor >= 4) return;
  mcpwm_set_duty_in_us(motorUnits[motor], motorTimers[motor], motorOps[motor], us);
}

// Arm one or all motors
void armESC(int motor) {
  if (motor == -1) {
    Serial.println("Arming all motors...");
    for (int i = 0; i < 4; i++) escWriteUs(i, ESC_MIN_US);
  } else {
    Serial.printf("Arming motor %d...\n", motor + 1);
    escWriteUs(motor, ESC_MIN_US);
  }
}

// Stop one or all motors
void stopESC(int motor) {
  if (motor == -1) {
    Serial.println("Stopping all motors...");
    for (int i = 0; i < 4; i++) escWriteUs(i, ESC_MIN_US);
  } else {
    Serial.printf("Stopping motor %d...\n", motor + 1);
    escWriteUs(motor, ESC_MIN_US);
  }
}

// Set throttle for one motor
void setThrottle(int motor, int us) {
  if (motor < 0 || motor >= 4) return;
  us = constrain(us, ESC_MIN_US, ESC_MAX_US);
  escWriteUs(motor, us);
  Serial.printf("Motor %d throttle set to %d µs\n", motor + 1, us);
}

void setup() {
  Serial.begin(115200);
  Serial.println("\n=== ESP32 4-Motor ESC Controller ===");
  Serial.println("Available commands:");
  Serial.println("  arm all            → arm all motors");
  Serial.println("  arm m1..m4         → arm specific motor");
  Serial.println("  set m1..m4 <us>    → set throttle (1000–2000 µs)");
  Serial.println("  stop all           → stop all motors");
  Serial.println("---------------------------------------");

  // Initialize MCPWM for each motor
  for (int i = 0; i < 4; i++) {
    mcpwm_gpio_init(motorUnits[i], motorOps[i] == MCPWM_OPR_A ? MCPWM0A + i : MCPWM0B + i, motorPins[i]);
    mcpwm_config_t pwm_config = {};
    pwm_config.frequency = ESC_FREQ_HZ;
    pwm_config.cmpr_a = 0;
    pwm_config.cmpr_b = 0;
    pwm_config.counter_mode = MCPWM_UP_COUNTER;
    pwm_config.duty_mode = MCPWM_DUTY_MODE_0;
    mcpwm_init(motorUnits[i], motorTimers[i], &pwm_config);
    escWriteUs(i, ESC_MIN_US);
  }

  Serial.println("ESCs initialized. Please arm before setting throttle.");
}

// Simple serial parser
String inputString = "";

void loop() {
  while (Serial.available()) {
    char c = Serial.read();
    if (c == '\n' || c == '\r') {
      if (inputString.length() > 0) {
        inputString.trim();
        Serial.printf("> %s\n", inputString.c_str());

        if (inputString.startsWith("arm")) {
          if (inputString.indexOf("all") != -1) armESC(-1);
          else if (inputString.indexOf("m1") != -1) armESC(0);
          else if (inputString.indexOf("m2") != -1) armESC(1);
          else if (inputString.indexOf("m3") != -1) armESC(2);
          else if (inputString.indexOf("m4") != -1) armESC(3);
        } 
        else if (inputString.startsWith("set")) {
          int motor = -1;
          if (inputString.indexOf("m1") != -1) motor = 0;
          else if (inputString.indexOf("m2") != -1) motor = 1;
          else if (inputString.indexOf("m3") != -1) motor = 2;
          else if (inputString.indexOf("m4") != -1) motor = 3;

          int us = inputString.substring(inputString.lastIndexOf(' ') + 1).toInt();
          if (motor != -1 && us >= ESC_MIN_US && us <= ESC_MAX_US) {
            setThrottle(motor, us);
          } else {
            Serial.println("Usage: set m# <1000–2000>");
          }
        } 
        else if (inputString.startsWith("stop")) {
          if (inputString.indexOf("all") != -1) stopESC(-1);
          else if (inputString.indexOf("m1") != -1) stopESC(0);
          else if (inputString.indexOf("m2") != -1) stopESC(1);
          else if (inputString.indexOf("m3") != -1) stopESC(2);
          else if (inputString.indexOf("m4") != -1) stopESC(3);
        } 
        else {
          Serial.println("Unknown command.");
        }

        inputString = "";
      }
    } else {
      inputString += c;
    }
  }
}
