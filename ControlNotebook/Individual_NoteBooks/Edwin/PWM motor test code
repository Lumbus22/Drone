// ESP32 DOIT DevKit V1 + Cyclone 35A ESC (NO LEDC, NO extra libs)
// Uses ESP-IDF MCPWM driver exposed by Arduino core 3.3.0
// Signal pin: GPIO 18 (safe choice). Remove propeller for testing.
// pin 18****

#include <Arduino.h>
#include "driver/mcpwm.h"

#define ESC_PIN     18
#define ESC_MIN_US  1000   // 1.0 ms = min throttle
#define ESC_MAX_US  2000   // 2.0 ms = max throttle
#define ESC_FREQ_HZ 50     // 50 Hz (20 ms period)

static inline void escWriteUs(int us) {
  // Writes a pulse width in microseconds on MCPWM0A (Unit0/Timer0/OpA)
  mcpwm_set_duty_in_us(MCPWM_UNIT_0, MCPWM_TIMER_0, MCPWM_OPR_A, us);
}

void setup() {
  Serial.begin(115200);
  Serial.println("\nMCPWM ESC test (ESP32 core 3.3.0), pin 18");

  // Route GPIO to MCPWM Unit0/Timer0/OperatorA
  mcpwm_gpio_init(MCPWM_UNIT_0, MCPWM0A, ESC_PIN);

  // Configure 50 Hz PWM (servo/esc)
  mcpwm_config_t cfg = {};
  cfg.frequency = ESC_FREQ_HZ;
  cfg.cmpr_a = 0; // start duty
  cfg.cmpr_b = 0;
  cfg.counter_mode = MCPWM_UP_COUNTER;
  cfg.duty_mode = MCPWM_DUTY_MODE_0;
  mcpwm_init(MCPWM_UNIT_0, MCPWM_TIMER_0, &cfg);

  // Arm ESC at minimum for ~3 seconds
  Serial.println("Arming at 1000us...");
  escWriteUs(ESC_MIN_US);
  delay(3000);
}

void loop() {
  // Ramp up
  for (int us = ESC_MIN_US; us <= ESC_MAX_US; us += 10) {
    escWriteUs(us);
    delay(20);
  }
  delay(1500);

  // Ramp down
  for (int us = ESC_MAX_US; us >= ESC_MIN_US; us -= 10) {
    escWriteUs(us);
    delay(20);
  }
  delay(1500);
}
